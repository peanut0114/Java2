package com.yedam.java.WrapperStream;

public class Q {
/*
 
 입출력 스트림 : 바이트 기반/ Char 기반으로 주고받음
 
 바이트 기반이든 문자 기반이든 최상위 클래스가 있음 -> InputStream / OutputStream / Reader / Writer
 (보조스트림도 이름보면 어느 클래스를 상송받는지 알 수 있음)
 
 보조 스트림(Wrapper Stream)을 통해 개발자의 부담을 낮출 수 있음 (버퍼 외에는 안 써도 무관)
 원래 바이트 타입으로 받아야하는데 보조 스트림 이용하면 char, String 타입으로 받을 수 있음
 
 보조스트림은 스트림과 프로그램 사이에 있음
 
 
 
 원래 바이트기반 스트림만 있었다
 바이트기반 스트림은 문자를 하나씩 쪼개버림 (문자는 2바이트짜리)
 개발자가 별도의 처리를 해줘야 문자로 읽을 수 있음
 그래서 문자기반 스트림을 만든거임 OR 바이트기반에 보조스트림 이용
 문자기반은 문자 외의 것은 읽기 힘듬.. 요즘은 최소한 이미지 있음 
 -> 보통 바이트기반 기본하고 필요에 따라 보조스트림 붙여 데이터 변환시킴
 
 보조스트림으로 모든 타입 입출력 가능! -> 선입선출임! 
 클래스 통째로 입출력 가능! -> 출력은 직렬화(바이트 배열로), 입력은 역직렬화
 BUT 유출.. 함부로 NO! Serializable 을 구현한 객체만 

 한글과 워드는 저장 기준이 달라 서로 읽는데 문제 있음 -> 확장자에 맞춰 뷰어를 찾아야함 (인코딩,디코딩)
 모든 파일은 바이트 타입 -> 읽으려면 바이트 타입에 맞춰야 속도가 좋음 (인코딩,디코딩은 단계가 늘어남)
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */
}
